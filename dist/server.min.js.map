{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","dotenv","bodyParser","config","port","process","env","PORT","app","use","json","destination","req","file","cb","filename","Date","now","multer","storage","path","join","__dirname","connect","then","console","log","err","MONGODB_URI","Schema","useNewUrlParser","String","required","unique","useUnifiedTopology","default","Message","model","user","text","type","time","username","Boolean","FriendRequest","status","enum","sentAt","post","res","regeneratorRuntime","async","_context","prev","next","body","User","awrap","save","t0","send","message","error","stop","isPrivate","users","_context2","find","sent","sender","_req$body","receiver","friendRequest","_context3","findOne","$in","abrupt","_req$body2","_context4","new","upload","single","_req$body3","toUser","_context5","concat","get","messages","_context6","query","$or","sort","listen"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\nconst multer = require('multer');\r\nconst dotenv = require('dotenv');\r\nconst path = require('path');\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\n// Initialize the app\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Set up file upload (for media files like images/videos)\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, 'uploads/'); // Specify upload folder\r\n  },\r\n  filename: (req, file, cb) => {\r\n    // Format the filename with timestamp and original name\r\n    cb(null, Date.now() + '-' + file.originalname);\r\n  }\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// Serve static files (HTML, CSS, JS) from the 'public' directory\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// MongoDB Connection\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() => console.log('MongoDB connected'))\r\n  .catch((err) => console.log('Error connecting to MongoDB:', err));\r\n\r\n// Define Mongoose Models\r\nconst User = mongoose.model('User', new mongoose.Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  status: { type: String, default: 'active' },\r\n}));\r\n\r\nconst Message = mongoose.model('Message', new mongoose.Schema({\r\n  user: { type: String, required: true },\r\n  text: { type: String },\r\n  file: { type: String }, // URL to the file\r\n  time: { type: Date, default: Date.now },\r\n  isPrivate: { type: Boolean, default: false },\r\n  toUser: { type: String }, // Private message recipient\r\n}));\r\n\r\nconst FriendRequest = mongoose.model('FriendRequest', new mongoose.Schema({\r\n  sender: { type: String, required: true },\r\n  receiver: { type: String, required: true },\r\n  status: { type: String, enum: ['pending', 'accepted', 'rejected'], default: 'pending' },\r\n  sentAt: { type: Date, default: Date.now },\r\n}));\r\n\r\n// Routes\r\n\r\n// Route for registration\r\napp.post('/register', async (req, res) => {\r\n  const { username } = req.body;\r\n  try {\r\n    const user = new User({ username });\r\n    await user.save();\r\n    res.status(200).send({ message: 'User registered successfully!' });\r\n  } catch (error) {\r\n    res.status(400).send({ message: 'Error registering user', error });\r\n  }\r\n});\r\n\r\n// Route to get all active users\r\napp.get('/users', async (req, res) => {\r\n  try {\r\n    const users = await User.find({ status: 'active' });\r\n    res.json(users);\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error fetching users', error });\r\n  }\r\n});\r\n\r\n// Route to send a friend request\r\napp.post('/send-friend-request', async (req, res) => {\r\n  const { sender, receiver } = req.body;\r\n\r\n  try {\r\n    // Check if there's an existing friend request (pending or accepted)\r\n    const existingRequest = await FriendRequest.findOne({\r\n      sender,\r\n      receiver,\r\n      status: { $in: ['pending', 'accepted'] },\r\n    });\r\n\r\n    if (existingRequest) {\r\n      return res.status(400).send({ message: 'Friend request already sent or accepted.' });\r\n    }\r\n\r\n    const friendRequest = new FriendRequest({ sender, receiver });\r\n    await friendRequest.save();\r\n    res.status(200).send({ message: 'Friend request sent successfully!' });\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error sending friend request', error });\r\n  }\r\n});\r\n\r\n// Route to accept a friend request\r\napp.post('/accept-friend-request', async (req, res) => {\r\n  const { sender, receiver } = req.body;\r\n\r\n  try {\r\n    // Update the status of the friend request to 'accepted'\r\n    const request = await FriendRequest.findOneAndUpdate(\r\n      { sender, receiver, status: 'pending' },\r\n      { status: 'accepted' },\r\n      { new: true }\r\n    );\r\n\r\n    if (!request) {\r\n      return res.status(400).send({ message: 'No pending request found.' });\r\n    }\r\n\r\n    res.status(200).send({ message: 'Friend request accepted!' });\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error accepting friend request', error });\r\n  }\r\n});\r\n\r\n// Route to send a message (public or private)\r\napp.post('/send-message', upload.single('file'), async (req, res) => {\r\n  const { user, text, toUser, isPrivate } = req.body;\r\n  const file = req.file ? `/uploads/${req.file.filename}` : null;\r\n\r\n  try {\r\n    const message = new Message({\r\n      user,\r\n      text,\r\n      file,\r\n      isPrivate,\r\n      toUser,\r\n    });\r\n\r\n    await message.save();\r\n    res.status(200).send({ message: 'Message sent successfully!' });\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error sending message', error });\r\n  }\r\n});\r\n\r\n// Route to get all messages (or filtered messages based on user)\r\napp.get('/messages', async (req, res) => {\r\n  const { username } = req.query; // We can pass the `username` as a query parameter to filter messages\r\n\r\n  try {\r\n    let messages;\r\n\r\n    if (username) {\r\n      // If a username is provided, filter messages for that user (both public and private)\r\n      messages = await Message.find({\r\n        $or: [{ isPrivate: false }, { toUser: username }],\r\n      }).sort({ time: 1 });\r\n    } else {\r\n      // If no username is provided, return all messages (for admin or public view)\r\n      messages = await Message.find().sort({ time: 1 });\r\n    }\r\n\r\n    res.json(messages);\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error fetching messages', error });\r\n  }\r\n});\r\n\r\n// Serve media files (images/videos)\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n"]}