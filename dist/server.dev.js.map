{"version":3,"sources":["server.js"],"names":["express","require","mongoose","bodyParser","cors","multer","dotenv","path","config","app","port","process","env","PORT","use","json","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","join","__dirname","connect","MONGODB_URI","useNewUrlParser","useUnifiedTopology","then","console","log","err","User","model","Schema","username","type","String","required","unique","status","Message","user","text","time","isPrivate","Boolean","toUser","FriendRequest","sender","receiver","sentAt","post","res","body","save","send","message","error","get","find","users","findOne","$in","existingRequest","friendRequest","findOneAndUpdate","request","single","query","$or","sort","messages","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\nconst multer = require('multer');\r\nconst dotenv = require('dotenv');\r\nconst path = require('path');\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\n// Initialize the app\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Set up file upload (for media files like images/videos)\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, 'uploads/'); // Specify upload folder\r\n  },\r\n  filename: (req, file, cb) => {\r\n    // Format the filename with timestamp and original name\r\n    cb(null, Date.now() + '-' + file.originalname);\r\n  }\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// Serve static files (HTML, CSS, JS) from the 'public' directory\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// MongoDB Connection\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() => console.log('MongoDB connected'))\r\n  .catch((err) => console.log('Error connecting to MongoDB:', err));\r\n\r\n// Define Mongoose Models\r\nconst User = mongoose.model('User', new mongoose.Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  status: { type: String, default: 'active' },\r\n}));\r\n\r\nconst Message = mongoose.model('Message', new mongoose.Schema({\r\n  user: { type: String, required: true },\r\n  text: { type: String },\r\n  file: { type: String }, // URL to the file\r\n  time: { type: Date, default: Date.now },\r\n  isPrivate: { type: Boolean, default: false },\r\n  toUser: { type: String }, // Private message recipient\r\n}));\r\n\r\nconst FriendRequest = mongoose.model('FriendRequest', new mongoose.Schema({\r\n  sender: { type: String, required: true },\r\n  receiver: { type: String, required: true },\r\n  status: { type: String, enum: ['pending', 'accepted', 'rejected'], default: 'pending' },\r\n  sentAt: { type: Date, default: Date.now },\r\n}));\r\n\r\n// Routes\r\n\r\n// Route for registration\r\napp.post('/register', async (req, res) => {\r\n  const { username } = req.body;\r\n  try {\r\n    const user = new User({ username });\r\n    await user.save();\r\n    res.status(200).send({ message: 'User registered successfully!' });\r\n  } catch (error) {\r\n    res.status(400).send({ message: 'Error registering user', error });\r\n  }\r\n});\r\n\r\n// Route to get all active users\r\napp.get('/users', async (req, res) => {\r\n  try {\r\n    const users = await User.find({ status: 'active' });\r\n    res.json(users);\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error fetching users', error });\r\n  }\r\n});\r\n\r\n// Route to send a friend request\r\napp.post('/send-friend-request', async (req, res) => {\r\n  const { sender, receiver } = req.body;\r\n\r\n  try {\r\n    // Check if there's an existing friend request (pending or accepted)\r\n    const existingRequest = await FriendRequest.findOne({\r\n      sender,\r\n      receiver,\r\n      status: { $in: ['pending', 'accepted'] },\r\n    });\r\n\r\n    if (existingRequest) {\r\n      return res.status(400).send({ message: 'Friend request already sent or accepted.' });\r\n    }\r\n\r\n    const friendRequest = new FriendRequest({ sender, receiver });\r\n    await friendRequest.save();\r\n    res.status(200).send({ message: 'Friend request sent successfully!' });\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error sending friend request', error });\r\n  }\r\n});\r\n\r\n// Route to accept a friend request\r\napp.post('/accept-friend-request', async (req, res) => {\r\n  const { sender, receiver } = req.body;\r\n\r\n  try {\r\n    // Update the status of the friend request to 'accepted'\r\n    const request = await FriendRequest.findOneAndUpdate(\r\n      { sender, receiver, status: 'pending' },\r\n      { status: 'accepted' },\r\n      { new: true }\r\n    );\r\n\r\n    if (!request) {\r\n      return res.status(400).send({ message: 'No pending request found.' });\r\n    }\r\n\r\n    res.status(200).send({ message: 'Friend request accepted!' });\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error accepting friend request', error });\r\n  }\r\n});\r\n\r\n// Route to send a message (public or private)\r\napp.post('/send-message', upload.single('file'), async (req, res) => {\r\n  const { user, text, toUser, isPrivate } = req.body;\r\n  const file = req.file ? `/uploads/${req.file.filename}` : null;\r\n\r\n  try {\r\n    const message = new Message({\r\n      user,\r\n      text,\r\n      file,\r\n      isPrivate,\r\n      toUser,\r\n    });\r\n\r\n    await message.save();\r\n    res.status(200).send({ message: 'Message sent successfully!' });\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error sending message', error });\r\n  }\r\n});\r\n\r\n// Route to get all messages (or filtered messages based on user)\r\napp.get('/messages', async (req, res) => {\r\n  const { username } = req.query; // We can pass the `username` as a query parameter to filter messages\r\n\r\n  try {\r\n    let messages;\r\n\r\n    if (username) {\r\n      // If a username is provided, filter messages for that user (both public and private)\r\n      messages = await Message.find({\r\n        $or: [{ isPrivate: false }, { toUser: username }],\r\n      }).sort({ time: 1 });\r\n    } else {\r\n      // If no username is provided, return all messages (for admin or public view)\r\n      messages = await Message.find().sort({ time: 1 });\r\n    }\r\n\r\n    res.json(messages);\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error fetching messages', error });\r\n  }\r\n});\r\n\r\n// Serve media files (images/videos)\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n"],"file":"server.dev.js"}